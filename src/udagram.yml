Parameters:
  ProjectName:
    Type: String
    Description: Tag name for resources
  AsgMinCapacity:
    Type: String
    Description: Min capacity for the fleet of instances
  AsgDesiredCapacity:
    Type: String
    Description: Desired capacity for the fleet of instances
  AsgMaxCapacity:
    Type: String
    Description: Max capacity for the fleet of instances
  KeyPairName:
    Type: String
    Description: Define key-pair name

Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Ref ProjectName
      VpcId:
        Fn::ImportValue:
          !Sub "${ProjectName}-vpc-id"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http access to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${ProjectName}-vpc-id"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateData:
        UserData:
          Fn::Base64: |
            #!/bin/bash
            apt-get update -y
            sudo apt-get install nginx -y
            service nginx start
            WEB_DIR="/var/www/html"
            # Create a basic index.html file
            cat <<EOF > index.html
            <!DOCTYPE html>
            <html>
            <head>
                <title>It works! Udagram, Udacity</title>
            </head>
            <body>
                <h1>It works! Udagram, Udacity</h1>
                <p>Hello! My name's Khuong Ba Son - SonKB</p>
            </body>
            </html>
            EOF
            sudo rm -r $WEB_DIR/index.*
            sudo cp index.html $WEB_DIR
            service nginx restart
        ImageId: ami-0866a3c8686eaeeba
        SecurityGroupIds:
          - !Ref SecurityGroup
        InstanceType: t2.micro
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'
        KeyName: !Ref KeyPairName
        IamInstanceProfile:
          Name: !Ref InstanceProfile

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${ProjectName}-private-subnets"
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: !Ref AsgMinCapacity
      DesiredCapacity: !Ref AsgDesiredCapacity
      MaxSize: !Ref AsgMaxCapacity
      TargetGroupARNs:
      - Ref: TargetGroup

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${ProjectName}-public-subnet1"
      - Fn::ImportValue: !Sub "${ProjectName}-public-subnet2"
      SecurityGroups:
      - Ref: LoadBalancerSecurityGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: TargetGroup
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: '80'
      Protocol: HTTP

  ListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'TargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${ProjectName}-vpc-id"

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref ProjectName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: 'Allow'
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
      - !Ref IAMRole

Outputs:
  LoadBalancerURL:
    Description: "Public URL of your Application"
    Value: !Sub "http://${LoadBalancer.DNSName}"
    Export:
      Name: !Sub "${ProjectName}-load-balancer-url"